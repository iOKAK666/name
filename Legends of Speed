--local ss = Window:CreateTab("Auto Farm", "circle-play")
--local sss = Window:CreateTab("Teleport", "circle-fading-arrow-up")
--local race = Window:CreateTab("Race", "rewind")
--local egg = Window:CreateTab("Crystal", "egg")
--local misc = Window:CreateTab("Misc", "settings-2")
--local cred = Window:CreateTab("Credits", "cross")
--local how = Window:CreateTab("Glitch Help", "settings")

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Window = Rayfield:CreateWindow({
    Name = "Legends of Speed",
    Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
    LoadingTitle = "Loading...",
    LoadingSubtitle = "by 1 Hz",
    Theme = "Dark Blue", -- Check https://docs.sirius.menu/rayfield/configuration/themes
 
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface
 
    ConfigurationSaving = {
       Enabled = true,
       FolderName = nil, -- Create a custom folder for your hub/game
       FileName = "by 1 Hz"
    },
 
    Discord = {
       Enabled = true, -- Prompt the user to join your Discord server if their executor supports it
       Invite = "YERMQTRRmQ", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
       RememberJoins = false -- Set this to false to make them join the discord every time they load it up
    },
 
    KeySystem = false, -- Set this to true to use our key system
    KeySettings = {
       Title = "Legends of Speed",
       Subtitle = "Key System",
       Note = "Join Discord For Get Key!", -- Use this to tell the user how to get a key
       FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
       SaveKey = false, -- The user's key will be saved, but if you change the key, they will be unable to use your script
       GrabKeyFromSite = true, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
       Key = {"ILOVE_1Hz"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
    }
 })
 Rayfield:Notify({
    Title = "Legends of Speed",
    Content = "by 1 Hz",
    Duration = 6.5,
    Image = "check",
 })
local Main = Window:CreateTab("Main", "circle-check")
local player = game.Players.LocalPlayer
local antiAFK = true
player.Idled:connect(function()
while wait(5) do
	if antiAFK then
		game.VirtualUser:Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
		wait(1)
		game.VirtualUser:Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
		end
	end
end)
local Time = Main:CreateLabel("Executer Time")
function UpdateTime()
local GameTime = math.floor(workspace.DistributedGameTime+0.5)
local Hour = math.floor(GameTime/(60^2))%24
local Minute = math.floor(GameTime/(60^1))%60
local Second = math.floor(GameTime/(60^0))%60
Time:Set("[GameTime] : Hours : "..Hour.." Minutes : "..Minute.." Seconds : "..Second)
end
    
spawn(function()
    while task.wait() do
     pcall(function()
      UpdateTime()
      end)
     end
end)
local Client = Main:CreateLabel("Client")
function UpdateClient()
local Fps = workspace:GetRealPhysicsFPS()
    Client:Set("[Fps] : "..Fps)
end
    
spawn(function()
    while true do wait(.1)
    UpdateClient()
    end
end) 
local Client1 = Main:CreateLabel("Client")
function UpdateClient1()
local Ping = game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValueString()
Client1:Set("[Ping] : "..Ping)
end
    
spawn(function()
    while true do wait(.1)
        UpdateClient1()
    end
end)
local Section = Main:CreateSection("Main")
local Button = Main:CreateButton({
    Name = "Claim All Chests",
    Callback = function()
        workspace.goldenChest.circleInner.CFrame = player.Character.HumanoidRootPart.CFrame
        workspace.enchantedChest.circleInner.CFrame = player.Character.HumanoidRootPart.CFrame
        workspace.magmaChest.circleInner.CFrame = player.Character.HumanoidRootPart.CFrame
        workspace.groupRewardsCircle.circleInner.CFrame = player.Character.HumanoidRootPart.CFrame
        wait()
        workspace.goldenChest.circleInner.CFrame = oldGoldenChestPosition
        workspace.enchantedChest.circleInner.CFrame = oldEnchantedChestPosition
        workspace.magmaChest.circleInner.CFrame = oldMagmaChestPosition
        workspace.groupRewardsCircle.circleInner.CFrame = oldGroupRewardsPosition    
    end,
 })
 local Toggle = Main:CreateToggle({
    Name = "Auto Rebirth",
    CurrentValue = false,
    Flag = "Toggle", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(state)
        _G.Rebirth = (state and true or false)
        wait()
        while _G.Rebirth == true do
            wait()
            game.ReplicatedStorage.rEvents.rebirthEvent:FireServer("rebirthRequest")
            end
            spawn(function()
            pcall(function()
                game:GetService("RunService").Stepped:Connect(function()
                    if _G.NoClip then
                        for _, v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
                            if v:IsA("BasePart") then
                                v.CanCollide = false    
                            end
                        end
                    end
                end)
            end)
        end)
    end,
 })
 local Toggle = Main:CreateToggle({
    Name = "No Clip",
    CurrentValue = false,
    Flag = "Toggle", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(value)
        _G.NoClip = value
    end,
 })
 local Button = Main:CreateButton({
    Name = "Dissable Trading",
    Callback = function()
        local args = {
            [1] = "disableTrading"
        }
        
        game:GetService("ReplicatedStorage").rEvents.tradingEvent:FireServer(unpack(args))
    end,
 })
 local Button = Main:CreateButton({
    Name = "Enable Trading",
    Callback = function()
        local args = {
            [1] = "enableTrading"
        }
        
        game:GetService("ReplicatedStorage").rEvents.tradingEvent:FireServer(unpack(args))
    end,
 })
 local Slider = Main:CreateSlider({
    Name = "Speed",
    Range = {300, 5000},
    Increment = 300,
    Suffix = "Speed",
    CurrentValue = 300,
    Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(v)
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = v
    end,
 })
 local Slider = Main:CreateSlider({
    Name = "JumpPower",
    Range = {50, 1000},
    Increment = 50,
    Suffix = "JumpPower",
    CurrentValue = 50,
    Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(v)
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = v
    end,
 })
 local ss = Window:CreateTab("Auto Farm", "circle-play")
 local label = ss:CreateLabel("Farm Setting")
 local locate;
 local Dropdown = ss:CreateDropdown({
    Name = "Select Location",
    Options = {"City","Snow City","Magma City","Legends Highway","Space" ,"Desert" },
    CurrentOption = {"1Hz"},
    MultipleOptions = false,
    Flag = "Dropdown1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(value)
        locate = value;    
    end,
 })
 local orbs;
 local Dropdown = ss:CreateDropdown({
    Name = "Select Orbs",
    Options = {"Red Orb","Yellow Orb","Gem" },
    CurrentOption = {"1Hz"},
    MultipleOptions = false,
    Flag = "Dropdown1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(value)
        orbs = value;    
    end,
 })
 local setFarm;
 local Dropdown = ss:CreateDropdown({
    Name = "Select Mode",
    Options = {"Super Fast","Fast","Medium","Slow"},
    CurrentOption = {"1Hz"},
    MultipleOptions = false,
    Flag = "Dropdown1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(value)
        setFarm = value;   
        if setFarm == "Super Fast" then
            setFarm = 40
         elseif setFarm == "Fast" then
            setFarm = 30 
         elseif setFarm == "Medium" then
            setFarm = 20
         elseif setFarm == "Slow" then
            setFarm = 10
         end
    end,
 })
local sf = ss:CreateLabel("Super Fast Value = 40")
local sf = ss:CreateLabel("Fast Value = 30")
local sf = ss:CreateLabel("Medium Value = 20")
local sf = ss:CreateLabel("Slow Value = 10")

local Toggle = ss:CreateToggle({
    Name = "Start Farm",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(state)
        _G.Farm = (state and true or false)
        wait()
        while _G.Farm == true do
            wait()
        for i=1, setFarm do
    local A_1 = "collectOrb"
    local A_2 = orbs
    local A_3 = locate
    local Event = game:GetService("ReplicatedStorage").rEvents.orbEvent
    Event:FireServer(A_1, A_2, A_3)
    end
    end    
    end,
 })
 local Toggle = ss:CreateToggle({
    Name = "Hoops Farm",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(state)
        _G.Hoops = (state and true or false)
        wait()
        while _G.Hoops == true do
            wait()
        local children = workspace.Hoops:GetChildren()
        for i, child in ipairs(children) do
            if child.Name == 'Hoop' then
    child.Transparency = 1
                child.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
            end
            end
            end 
     
    game.ReplicatedStorage.raceInProgress.Changed:Connect(function(state)
        if not getgenv().AutoRace then return end
        if state then
            game.ReplicatedStorage.rEvents.raceEvent:FireServer('joinRace')
            wait()
            player.PlayerGui.gameGui.raceJoinLabel.Visible = false
        end
    end)
    game.ReplicatedStorage.raceStarted.Changed:Connect(function(state)
        if not getgenv().AutoRace then return end
        if state then
            for i, v in pairs(workspace.raceMaps:GetChildren()) do
                local oldFinishPosition = v.finishPart.CFrame
                v.finishPart.CFrame = player.Character.HumanoidRootPart.CFrame
                wait()
                v.finishPart.CFrame = oldFinishPosition
            end
        end
    end)
    end,
 })
 local race = Window:CreateTab("Race", "rewind")
 local Toggle = race:CreateToggle({
    Name = "Auto Finish Race",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(state)
        getgenv().AutoRace = state
    end,
 })
 local sss = Window:CreateTab("Teleport", "wifi")
 if game.PlaceId == 3101667897 then--City
    local Button = sss:CreateButton({
    Name = "City",
    Callback = function()
        game.Players.LocalPlayer.Character:MoveTo(Vector3.new(-9687.1923828125, 59.072853088378906, 3096.58837890625))
    end,
})
local Button = sss:CreateButton({
    Name = "Snow City",
    Callback = function()
        game.Players.LocalPlayer.Character:MoveTo(Vector3.new(-9677.6640625, 59.072853088378906, 3783.736572265625))
    end,
})
local Button = sss:CreateButton({
    Name = "Magma City",
    Callback = function()
        game.Players.LocalPlayer.Character:MoveTo(Vector3.new(-11053.3837890625, 217.0328369140625, 4896.10986328125))
    end,
})
local Button = sss:CreateButton({
    Name = "Legends Highway",
    Callback = function()
        game.Players.LocalPlayer.Character:MoveTo(Vector3.new(-13097.8583984375, 217.0328369140625, 5904.84716796875))
    end,
})
local Button = sss:CreateButton({
    Name = "Space",
    Callback = function()
        local ts = game:GetService("TeleportService")
        local p = game:GetService("Players").LocalPlayer
        ts:Teleport(3232996272, p)
    end,
})
local Button = sss:CreateButton({
    Name = "Desert",
    Callback = function()
        local ts = game:GetService("TeleportService")
        local p = game:GetService("Players").LocalPlayer
        ts:Teleport(3276265788, p)
    end,
})

elseif game.PlaceId == 3232996272 then --space

local Button = sss:CreateButton({
    Name = "City",
    Callback = function()
        local ts = game:GetService("TeleportService")
        local p = game:GetService("Players").LocalPlayer
        ts:Teleport(3101667897, p)
    end,
})
local Button = sss:CreateButton({
    Name = "Desert",
    Callback = function()
        local ts = game:GetService("TeleportService")
        local p = game:GetService("Players").LocalPlayer
        ts:Teleport(3276265788, p)
    end,
})

elseif game.PlaceId == 3276265788 then --desert

local Button = sss:CreateButton({
    Name = "City",
    Callback = function()
        local ts = game:GetService("TeleportService")
        local p = game:GetService("Players").LocalPlayer
        ts:Teleport(3101667897, p)
    end,
})
local Button = sss:CreateButton({
    Name = "Space",
    Callback = function()
        local ts = game:GetService("TeleportService")
        local p = game:GetService("Players").LocalPlayer
        ts:Teleport(3232996272, p)
    end,
})
end

local egg = Window:CreateTab("Crystal", "egg")
local Crystal = {}
for i,v in pairs(game.workspace.mapCrystalsFolder:GetChildren()) do 
    table.insert(Crystal,v.Name)
end

function OpenCrystal(v) 
local args = {
            [1] = "openCrystal",
            [2] = v
        }
        game:GetService("ReplicatedStorage").rEvents.openCrystalRemote:InvokeServer(unpack(args))
end
local OPENEGG
local Dropdown = egg:CreateDropdown({
    Name = "Select Crystal",
    Options = Crystal,
    CurrentOption = {"1Hz"},
    MultipleOptions = false,
    Flag = "Dropdown1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(value)
        OPENEGG = value    
    end,
 })
 local Toggle = egg:CreateToggle({
    Name = "Auto Open Crystal",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(state)
        _G.Mm = state
        while _G.Mm do
            wait(2)
            OpenCrystal(OPENEGG) 
        end    
    end,
 })
 spawn(function() 
    while wait() do
    if _G.AutoSellAllTrails then
    local rank = {}
    for i,rank in pairs(game:GetService("Players").LocalPlayer.trailsFolder:GetChildren()) do
    rank = rank.Name
        for i,item in pairs(game:GetService("Players").LocalPlayer.trailsFolder[rank]:GetChildren()) do
       
    local args = {
        [1] = "sellTrail",
        [2] = game:GetService("Players").LocalPlayer.trailsFolder[rank]:FindFirstChild(item.Name)
    }
    
    game:GetService("ReplicatedStorage").rEvents.sellTrailEvent:FireServer(unpack(args))
    
        
        end
    end
    end
    end
    end) 
    
    spawn(function() 
    while wait() do
    if _G.AutoSellAllPets then
    local rank = {}
    for i,rank in pairs(game:GetService("Players").LocalPlayer.petsFolder:GetChildren()) do
    rank = rank.Name
        for i,item in pairs(game:GetService("Players").LocalPlayer.petsFolder[rank]:GetChildren()) do
        if item.Name ~= "Ultra Birdie" then
    local args = {
        [1] = "sellPet",
        [2] = game:GetService("Players").LocalPlayer.petsFolder[rank]:FindFirstChild(item.Name)
    }
    
    game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
    
        end
        end
    end
    end
    end
    end) 
    
    spawn(function() 
    while wait() do
    if _G.BunnyFarm then
    local rank = {}
    for i,rank in pairs(game:GetService("Players").LocalPlayer.petsFolder:GetChildren()) do
    rank = rank.Name
        for i,item in pairs(game:GetService("Players").LocalPlayer.petsFolder[rank]:GetChildren()) do
        if item.Name ~= "Ultimate Overdrive Bunny" then
    local args = {
        [1] = "sellPet",
        [2] = game:GetService("Players").LocalPlayer.petsFolder[rank]:FindFirstChild(item.Name)
    }
    
    game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
    
        end
        end
    end
    end
    end
    end) 
    
    spawn(function() 
    while wait() do
    if _G.AutoUnique then
    local rank = {}
    for i,rank in pairs(game:GetService("Players").LocalPlayer.petsFolder:GetChildren()) do
    rank = rank.Name
      if rank ~= "Unique" then
        for i,item in pairs(game:GetService("Players").LocalPlayer.petsFolder[rank]:GetChildren()) do
      
    local args = {
        [1] = "sellPet",
        [2] = game:GetService("Players").LocalPlayer.petsFolder[rank]:FindFirstChild(item.Name)
    }
    
    game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
    
        end
        end
    end
    end
    end
    end) 
    
    spawn(function() 
    while wait() do
    if _G.OpenBirdieEgg then
    OpenCrystal("Electro Crystal") 
    end
    end
    end) 
    
    spawn(function() 
    while wait() do
    if _G.OpenVoidEgg then
    OpenCrystal("Desert Crystal") 
    end
    end
    end) 
    
    spawn(function() 
    while wait() do
    if _G.OpenLegendsEgg then
    OpenCrystal("Electro Legends Crystal") 
    end
    end
    end)
 local Toggle = egg:CreateToggle({
    Name = "Auto Void Dragon [Desert]",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(state)
        _G.OpenVoidEgg = state
        _G.AutoUnique = state
        _G.AutoSellAllTrails = state
    end,
 })
 local Toggle = egg:CreateToggle({
    Name = "Auto Ultra Birdie [Best Pet Desert]",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(state)
        _G.OpenBirdieEgg = state
        _G.AutoSellAllPets = state
        _G.AutoSellAllTrails = state
    end,
 })
 local Toggle = egg:CreateToggle({
    Name = "Auto Unltimate Overdrive Bunny",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(state)
        _G.BunnyFarm = state
        _G.OpenLegendsEgg = state
    end,
 })
 local Toggle = egg:CreateToggle({
    Name = "Auto Evolved All Pets",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(state)
        _G.Evo = (state and true or false)
        wait()
        while _G.Evo == true do
            wait()
            for i,v in pairs(game:GetService("Players").LocalPlayer.petsFolder:GetChildren()) do
        for i,v in pairs(game:GetService("Players").LocalPlayer.petsFolder[v.Name]:GetChildren()) do
    local args = {
        [1] = "evolvePet",
        [2] = v.Name
    }
    
    game:GetService("ReplicatedStorage").rEvents.petEvolveEvent:FireServer(unpack(args))
    end
    end
    end    
    end,
 })
 local misc = Window:CreateTab("Misc", "settings-2")
 local Toggle = misc:CreateToggle({
    Name = "Hide Popups",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(state)
        getgenv().HidePopups = state
        if not getgenv().HidePopups then player.PlayerGui.orbGui.Enabled = true player.PlayerGui.gameGui.trailsNotificationsFrame.Visible = true return end
        player.PlayerGui.orbGui.Enabled = false
        player.PlayerGui.gameGui.trailsNotificationsFrame.Visible = false
        end,
 })
 local Toggle = misc:CreateToggle({
    Name = "Inf Jump",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(v)
        _G.InfJump = v
        local InfiniteJumpEnabled = true
        game:GetService("UserInputService").JumpRequest:connect(function()
            if InfiniteJumpEnabled then
                game:GetService"Players".LocalPlayer.Character:FindFirstChildOfClass'Humanoid':ChangeState("Jumping")
            end
        end)
    end,
 })
 local Button = misc:CreateButton({
    Name = "Rejoin",
    Callback = function()
        local ts = game:GetService("TeleportService")
        local p = game:GetService("Players").LocalPlayer
        ts:Teleport(game.PlaceId, p)
    end,
 })
 local Button = misc:CreateButton({
    Name = "Low Server Hop",
    Callback = function()
        local module = loadstring(game:HttpGet"https://raw.githubusercontent.com/raw-scriptpastebin/FE/main/Server_Hop_Settings")()
		module:Teleport(game.PlaceId) ;
    end,
 })
 local cred = Window:CreateTab("Credits", "cross")
 local dis = cred:CreateLabel("Join My discord For More Info!")
local Button = cred:CreateButton({
    Name = "Copy Discord Link",
    Callback = function()
        setclipboard("https://discord.com/YERMQTRRmQ")
    end,
 })
 local how = Window:CreateTab("Glitch Help", "settings")
 local Section = how:CreateSection("Tutorial")
 local howw = how:CreateLabel("1. Use Pet Level 1 No XP")
 local howw = how:CreateLabel("2. Turn on Yellow Orbs In Auto Farm Menu")
 local howw = how:CreateLabel("3. Don't Get About XP")
 local howw = how:CreateLabel("4. Don't Use Other Features Except Yellow Orbs")
 local howw = how:CreateLabel("5. Done")
